// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MONSTERDATA_DATA_H_
#define FLATBUFFERS_GENERATED_MONSTERDATA_DATA_H_

#include "flatbuffers/flatbuffers.h"

namespace Data {

struct MonsterData;
struct MonsterDataBuilder;

struct MonsterList;
struct MonsterListBuilder;

struct MonsterData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MonsterDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LABEL = 4,
    VT_NAME = 6,
    VT_HP = 8,
    VT_AP = 10,
    VT_DP = 12
  };
  const flatbuffers::String *label() const {
    return GetPointer<const flatbuffers::String *>(VT_LABEL);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int16_t hp() const {
    return GetField<int16_t>(VT_HP, 0);
  }
  int16_t ap() const {
    return GetField<int16_t>(VT_AP, 0);
  }
  int16_t dp() const {
    return GetField<int16_t>(VT_DP, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LABEL) &&
           verifier.VerifyString(label()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_HP) &&
           VerifyField<int16_t>(verifier, VT_AP) &&
           VerifyField<int16_t>(verifier, VT_DP) &&
           verifier.EndTable();
  }
};

struct MonsterDataBuilder {
  typedef MonsterData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_label(flatbuffers::Offset<flatbuffers::String> label) {
    fbb_.AddOffset(MonsterData::VT_LABEL, label);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(MonsterData::VT_NAME, name);
  }
  void add_hp(int16_t hp) {
    fbb_.AddElement<int16_t>(MonsterData::VT_HP, hp, 0);
  }
  void add_ap(int16_t ap) {
    fbb_.AddElement<int16_t>(MonsterData::VT_AP, ap, 0);
  }
  void add_dp(int16_t dp) {
    fbb_.AddElement<int16_t>(MonsterData::VT_DP, dp, 0);
  }
  explicit MonsterDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MonsterData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MonsterData>(end);
    return o;
  }
};

inline flatbuffers::Offset<MonsterData> CreateMonsterData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> label = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int16_t hp = 0,
    int16_t ap = 0,
    int16_t dp = 0) {
  MonsterDataBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_label(label);
  builder_.add_dp(dp);
  builder_.add_ap(ap);
  builder_.add_hp(hp);
  return builder_.Finish();
}

inline flatbuffers::Offset<MonsterData> CreateMonsterDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *label = nullptr,
    const char *name = nullptr,
    int16_t hp = 0,
    int16_t ap = 0,
    int16_t dp = 0) {
  auto label__ = label ? _fbb.CreateString(label) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Data::CreateMonsterData(
      _fbb,
      label__,
      name__,
      hp,
      ap,
      dp);
}

struct MonsterList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MonsterListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTER_LIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Data::MonsterData>> *monster_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Data::MonsterData>> *>(VT_MONSTER_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MONSTER_LIST) &&
           verifier.VerifyVector(monster_list()) &&
           verifier.VerifyVectorOfTables(monster_list()) &&
           verifier.EndTable();
  }
};

struct MonsterListBuilder {
  typedef MonsterList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_monster_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Data::MonsterData>>> monster_list) {
    fbb_.AddOffset(MonsterList::VT_MONSTER_LIST, monster_list);
  }
  explicit MonsterListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MonsterList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MonsterList>(end);
    return o;
  }
};

inline flatbuffers::Offset<MonsterList> CreateMonsterList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Data::MonsterData>>> monster_list = 0) {
  MonsterListBuilder builder_(_fbb);
  builder_.add_monster_list(monster_list);
  return builder_.Finish();
}

inline flatbuffers::Offset<MonsterList> CreateMonsterListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Data::MonsterData>> *monster_list = nullptr) {
  auto monster_list__ = monster_list ? _fbb.CreateVector<flatbuffers::Offset<Data::MonsterData>>(*monster_list) : 0;
  return Data::CreateMonsterList(
      _fbb,
      monster_list__);
}

inline const Data::MonsterList *GetMonsterList(const void *buf) {
  return flatbuffers::GetRoot<Data::MonsterList>(buf);
}

inline const Data::MonsterList *GetSizePrefixedMonsterList(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Data::MonsterList>(buf);
}

inline const char *MonsterListIdentifier() {
  return "MDFB";
}

inline bool MonsterListBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, MonsterListIdentifier());
}

inline bool VerifyMonsterListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Data::MonsterList>(MonsterListIdentifier());
}

inline bool VerifySizePrefixedMonsterListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Data::MonsterList>(MonsterListIdentifier());
}

inline const char *MonsterListExtension() {
  return "mdfb";
}

inline void FinishMonsterListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Data::MonsterList> root) {
  fbb.Finish(root, MonsterListIdentifier());
}

inline void FinishSizePrefixedMonsterListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Data::MonsterList> root) {
  fbb.FinishSizePrefixed(root, MonsterListIdentifier());
}

}  // namespace Data

#endif  // FLATBUFFERS_GENERATED_MONSTERDATA_DATA_H_
